{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "factory-18"
		},
		"ADLS2_Connection_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ADLS2_Connection'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"northwindsalesDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'northwindsalesDB'"
		},
		"ADLS2_Connection_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datavalleystorage.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Staging_toFile_LKP",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Staging_toFile_LKP",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ordersData": {},
									"productsData": {},
									"TargetRevenuPerproduct": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Staging_toFile_LKP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "product_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "revenue",
						"type": "float",
						"precision": 15
					},
					{
						"name": "rank",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "REVENUE_BY_PRODUCT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS2_Connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "northwind_order_details.csv",
						"fileSystem": "orders"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "order_id",
						"type": "String"
					},
					{
						"name": "product_id",
						"type": "String"
					},
					{
						"name": "unit_price",
						"type": "String"
					},
					{
						"name": "quantity",
						"type": "String"
					},
					{
						"name": "discount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS2_Connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS2_Connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "revenue_by_product.csv",
						"fileSystem": "revenue-reports"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "product_id",
						"type": "String"
					},
					{
						"name": "total_orders",
						"type": "String"
					},
					{
						"name": "rank",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS2_Connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS2_Connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "products.csv",
						"fileSystem": "orders"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "product_id",
						"type": "String"
					},
					{
						"name": "product_name",
						"type": "String"
					},
					{
						"name": "supplier_id",
						"type": "String"
					},
					{
						"name": "category_id",
						"type": "String"
					},
					{
						"name": "quantity_per_unit",
						"type": "String"
					},
					{
						"name": "unit_price",
						"type": "String"
					},
					{
						"name": "units_in_stock",
						"type": "String"
					},
					{
						"name": "units_on_order",
						"type": "String"
					},
					{
						"name": "reorder_level",
						"type": "String"
					},
					{
						"name": "discontinued",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS2_Connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TargetRevenuPerProductName')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS2_Connection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "orders"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "category_id",
						"type": "String"
					},
					{
						"name": "category_name",
						"type": "String"
					},
					{
						"name": "description",
						"type": "String"
					},
					{
						"name": "picture",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS2_Connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS2_Connection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLS2_Connection_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ADLS2_Connection_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/northwindsalesDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('northwindsalesDB_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ThreeMinutes')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipeline1",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 3,
						"startTime": "2024-01-26T14:57:00",
						"timeZone": "Arabian Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Staging_toDB')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "ordersData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "LoadTarget"
						}
					],
					"transformations": [
						{
							"name": "getTotalOrders"
						},
						{
							"name": "OrdersRank"
						},
						{
							"name": "filterTopFive"
						}
					],
					"scriptLines": [
						"source(output(",
						"          order_id as string,",
						"          product_id as integer,",
						"          unit_price as float,",
						"          quantity as integer,",
						"          discount as float",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     ignoreNoFilesFound: false) ~> ordersData",
						"ordersData aggregate(groupBy(product_id),",
						"     total_orders = round(sum(unit_price * quantity), 1)) ~> getTotalOrders",
						"getTotalOrders rank(desc(total_orders, true),",
						"     caseInsensitive: true,",
						"     output(rank as long)) ~> OrdersRank",
						"OrdersRank filter(between(rank, 1, 5)) ~> filterTopFive",
						"filterTopFive sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          product_id as integer,",
						"          revenue as double,",
						"          rank as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          product_id,",
						"          revenue = total_orders,",
						"          rank",
						"     )) ~> LoadTarget"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Staging_toFile')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "ordersData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "LoadTarget"
						}
					],
					"transformations": [
						{
							"name": "getTotalOrders"
						},
						{
							"name": "OrdersRank"
						},
						{
							"name": "filterTopFive"
						}
					],
					"scriptLines": [
						"source(output(",
						"          order_id as string,",
						"          product_id as integer,",
						"          unit_price as float,",
						"          quantity as integer,",
						"          discount as float",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     ignoreNoFilesFound: false) ~> ordersData",
						"ordersData aggregate(groupBy(product_id),",
						"     total_orders = round(sum(unit_price * quantity), 1)) ~> getTotalOrders",
						"getTotalOrders rank(desc(total_orders, true),",
						"     caseInsensitive: true,",
						"     output(rank as long)) ~> OrdersRank",
						"OrdersRank filter(between(rank, 1, 5)) ~> filterTopFive",
						"filterTopFive sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          product_id as string,",
						"          total_orders as string,",
						"          rank as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          product_id,",
						"          total_orders,",
						"          rank",
						"     ),",
						"     partitionBy('hash', 1)) ~> LoadTarget"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Staging_toFile_LKP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "ordersData"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "productsData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TargetRevenuPerProductName",
								"type": "DatasetReference"
							},
							"name": "TargetRevenuPerproduct"
						}
					],
					"transformations": [
						{
							"name": "getTotalOrders"
						},
						{
							"name": "OrdersRank"
						},
						{
							"name": "filterTopFive"
						},
						{
							"name": "lkpProduct"
						},
						{
							"name": "selectColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          order_id as string,",
						"          product_id as integer,",
						"          unit_price as float,",
						"          quantity as integer,",
						"          discount as float",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     ignoreNoFilesFound: false) ~> ordersData",
						"source(output(",
						"          product_id as integer,",
						"          product_name as string,",
						"          supplier_id as string,",
						"          category_id as string,",
						"          quantity_per_unit as string,",
						"          unit_price as string,",
						"          units_in_stock as string,",
						"          units_on_order as string,",
						"          reorder_level as string,",
						"          discontinued as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> productsData",
						"ordersData aggregate(groupBy(product_id),",
						"     total_orders = round(sum(unit_price * quantity), 1)) ~> getTotalOrders",
						"getTotalOrders rank(desc(total_orders, true),",
						"     caseInsensitive: true,",
						"     output(rank as long)) ~> OrdersRank",
						"OrdersRank filter(between(rank, 1, 5)) ~> filterTopFive",
						"filterTopFive, productsData lookup(getTotalOrders@product_id == productsData@product_id,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     asc(productsData@product_id, true),",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lkpProduct",
						"lkpProduct select(mapColumn(",
						"          product_id = getTotalOrders@product_id,",
						"          total_orders,",
						"          rank,",
						"          product_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectColumns",
						"selectColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          category_id as string,",
						"          category_name as string,",
						"          description as string,",
						"          picture as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TargetRevenuPerproduct"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText3')]",
				"[concat(variables('factoryId'), '/datasets/TargetRevenuPerProductName')]"
			]
		}
	]
}